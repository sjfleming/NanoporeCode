function [y1] = csgg_scaled_nn(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Oct-2017 19:12:15.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx24 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338;-0.580771288458338];
x1_step1.gain = [0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914;0.868744590886914];
x1_step1.ymin = -1;

% Layer 1
b1 = -0.17801643741462661;
IW1_1 = [0.13649731682774152 -0.20944796274017774 -0.33107200433303741 -0.078228802687397112 -0.1352753134778987 0.01681345886782698 0.1582045059864732 -0.050147941089068809 -0.026679804003268782 0.019954990389049677 -0.19298838817027886 -0.023567767568586879 0.097392084383197242 -0.28924604150077166 -0.39187216464685304 -0.089725262888920285 -0.15969416309244935 0.0034541010390274117 0.1608014523564644 0.03782701296222564 0.071634816160134812 -0.14512542295670863 -0.23082737198591954 -0.005727190301039263];

% Layer 2
b2 = -0.45498332081859272;
LW2_1 = 1.1600949150800592;

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.404533178311166;
y1_step1.xoffset = -2.75307152173214;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
